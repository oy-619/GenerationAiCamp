# -*- coding: utf-8 -*-
"""Chapter7:【提出課題②: 解答用】SemanticSimilarityExampleSelector

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15vkMJbK9nmVdCw4CRZ9aa9npsyfM8kZs

# Lesson9: LangChainの主要モジュール1【Model I/O】：Prompts
# Chapter7:【提出課題②: 解答用】SemanticSimilarityExampleSelector

事前準備を行った上で、提出課題に取り組みましょう。

**【提出方法】**  
Slackでメンターをメンションの上、上記シート右上の「共有」からリンクをコピーし、提出してください。

## 事前準備

OpenAI APIキーの設定
"""

import os
from google.colab import userdata

os.environ["OPENAI_API_KEY"] = userdata.get("OPENAI_API_KEY")

"""各種パッケージのインストール"""

!pip install langchain==0.3.0 openai==1.47.0 langchain-community==0.3.0 langchain-openai==0.2.2 httpx==0.27.2

"""## 提出課題

以下の条件に基づき、必要なパッケージをインストールの上でSemanticSimilarityExampleSelectorを使い、複数の回答例の中から入力内容と関連性の高い回答例を埋め込んだプロンプトを作成してください。
またroleがuserのメッセージに生成結果を渡し、Chat Completions APIで適切に要約されるかを確認しましょう。

**【条件】**
*   動物、技術、歴史という3つの異なる分野において、回答例を各分野ごとに2つずつ、合計6つ用意する
*   プロンプトに埋め込む回答例の数は2つとする
*   FewShotPromptTemplateのprefixパラメータには、「あなたは優秀なAIアシスタントです。質問に簡潔に答えてください。」の文言を設定する
*   入力文言は「ブロックチェーン技術の主な特徴は何ですか？」とする
"""

# 「tiktoken」と「faiss-cpu」パッケージをインストール
!pip install tiktoken faiss-cpu

# 「SemanticSimilarityExampleSelector」クラスの読み込みに加え、「FAISS」クラスと「OpenAIEmbeddings」クラスを読込む
# FAISSは、ユーザーの入力内容と関連性の高い回答例を探すために使うデータベース
# OpenAIEmbeddingsは「埋め込み」という手法を使い、ユーザーの入力内容と関連性の高い回答例を探すため、「入力内容」と「回答例」を検索しやすいように特定のデータ形式に変換する機能
from langchain.prompts import FewShotPromptTemplate
from langchain.prompts.example_selector import SemanticSimilarityExampleSelector
from langchain.prompts.prompt import PromptTemplate
from langchain.vectorstores import FAISS
from langchain.embeddings import OpenAIEmbeddings

# 回答例を用意
examples = [
    {"question": "カンガルーはどのように移動しますか？", "answer": "カンガルーは強力な後ろ足を使ってジャンプしながら移動します。尾はバランスを取るために使われます。"},
    {"question": "イルカはなぜ超音波を使うのですか？", "answer": "イルカはエコーロケーションと呼ばれる方法で超音波を使い、周囲の物体を把握して狩りやナビゲーションに役立てます。"},
    {"question": "ブロックチェーンとは何ですか？", "answer": "ブロックチェーンは、取引データを分散型ネットワーク上で暗号化して記録する仕組みで、改ざんが困難な特徴を持っています。"},
    {"question": "5Gの特徴を簡単に説明してください。", "answer": "5Gは第5世代の移動通信システムで、高速通信、低遅延、同時多接続が特徴です。IoTや自動運転に活用されています。"},
    {"question": "産業革命はいつ始まりましたか？", "answer": "産業革命は18世紀後半、イギリスで始まりました。蒸気機関の発明により工業化が加速しました。"},
    {"question": "ルネサンスはどの時代に起きましたか？", "answer": "ルネサンスは14世紀から16世紀にかけてヨーロッパで起き、芸術や科学が大きく発展しました。"},
]

# 回答例を埋め込むプロンプトテンプレートを用意
examples_template = """
入力：{question}
出力：{answer}
"""
example_prompt = PromptTemplate(
    input_variables=["question", "answer"],
    template=examples_template
)

# SemanticSimilarityExampleSelectorクラスのfrom_examples()メソッドを使ってインスタンスを作成
example_selector = SemanticSimilarityExampleSelector.from_examples(
    # 用意した複数の回答例を「examples」パラメータに指定
    examples=examples,
    # 入力内容と関連性の高い回答例を探すための埋め込みを生成するためのOpenAIEmbeddingsクラスのインスタンスを「embeddings」に指定
    embeddings=OpenAIEmbeddings(),
    # 検索用で使うデータベースFAISSを「vectorstore_cls」パラメータに指定
    vectorstore_cls=FAISS,
    # プロンプトに埋め込む回答例の数を「k」パラメータに指定
    # ここでは「k=2」と指定しているため、プロンプトに埋め込まれる回答例の数は2つ
    k=2
)

# FewShotPromptTemplateの初期化はFewShotPromptTemplateと同様
fewshot_prompt = FewShotPromptTemplate(
    example_selector=example_selector,
    example_prompt=example_prompt,
    prefix="あなたは優秀なAIアシスタントです。質問に簡潔に答えてください。",
    suffix="入力：{question}\n出力：",
    input_variables=["question"],
    example_separator="\n\n"
)

# 入力内容を基にプロンプトを生成する処理はFewShotPromptTemplateと同じ
message = fewshot_prompt.format(question="ブロックチェーン技術の主な特徴は何ですか？")

print(message)

from langchain_openai import ChatOpenAI
from langchain.schema import SystemMessage, HumanMessage

llm = ChatOpenAI(model_name="gpt-4o-mini", temperature=0)

messages = [
    SystemMessage(content="You are a helpful assistant."),
    HumanMessage(content=message),
]

result = llm(messages)
print(result.content)