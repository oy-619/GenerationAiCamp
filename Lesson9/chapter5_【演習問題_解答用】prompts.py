# -*- coding: utf-8 -*-
"""Chapter5:【演習問題: 解答用】Prompts

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mCQytdEXyWz5KALCNBagccygEgjJNWyx

# Lesson9: LangChainの主要モジュール1【Model I/O】：Prompts
# Chapter5:【演習問題: 解答用】Prompts

事前準備を行った上で、3つの演習問題に取り組みましょう。

各問題の「回答例/正解」と「解説」はデフォルトで非表示としていますが、  
非表示セルをクリックすれば確認できます。

まずは「回答例/正解」と「解説」を見ずにトライしてみましょう。

## 事前準備

OpenAI APIキーの設定
"""

import os
from google.colab import userdata

os.environ["OPENAI_API_KEY"] = userdata.get("OPENAI_API_KEY")

"""各種パッケージのインストール"""

!pip install langchain==0.3.0 openai==1.47.0 langchain-community==0.3.0 langchain-openai==0.2.2 httpx==0.27.2

"""## 演習問題

### 【問題1】
PromptTemplateを使い、商品名「テレビ」と価格「10万」のテキストを「 {product} の価格は {price} 円です。」というテンプレートの変数の箇所に埋め込み、プロンプトを作って表示してください。
"""

# promptsモジュールからPromptTemplateクラスを読込む
from langchain.prompts import PromptTemplate

# プロンプトのテンプレート文字列（テンプレート用の文字列）を用意し、変数templateに格納
# ユーザーが入力した商品と値段をLLMに指示を出すために、プロンプトのテンプレートを用意
# 「{product}」と「{price}」は、ユーザーの入力で置換される部分
template = """
 {product} の価格は {price} 円です。
"""

# 用意したテンプレートを使ってPromptTemplateのインスタンス化
# 用意したプロンプトのテンプレートを、PromptTemplateの「template」パラメータに渡す
# 「input_variables」パラメータに、テンプレートの中でユーザー入力の置換用として記述していた「product」と「price」をリストの要素として指定
prompt = PromptTemplate(
    input_variables=["product", "price"],
    template=template,
)

# PromptTemplateのformat()メソッドを使い、「input_variables」であらかじめ指定していた「product」引数と「price」引数に文字列を指定
message = prompt.format(product="テレビ", price="10万")

print(message)

"""#### 【解答例】"""

from langchain.prompts import PromptTemplate

template = """{product}の価格は{price}円です。"""

prompt = PromptTemplate(
    input_variables=["product", "price"],
    template=template,
)

result = prompt.format(product="テレビ", price="10万")
print(result)

"""#### 【解説】

PromptTemplateで、入力を受け取りプロンプトを生成するformat()メソッドの引数に、PromptTemplateのinput_variablesで指定した「product」にテレビを、「price」に10万を渡します。

これでそれぞれの入力値が変数「template」内の各変数に埋め込まれ、プロンプトが生成されます。

### 【問題2】
ChatPromptTemplateを使い、Chat Completions APIに渡すチャットリストについて、roleがsystemのメッセージを「あなたは{genre}の専門家です。質問に対して初心者にも分かりやすく簡潔に答えてください。」とし、roleがuserのメッセージは質問部分に変数を使って設定し、ユーザーの質問に対して専門家AIが回答するプロンプトを作って表示してください。
"""

# promptsモジュールから、ChatPromptTemplateで必要なクラスを一式を読込む
# ChatPromptTemplateクラスに加えて、「SystemMessagePromptTemplate」と「HumanMessagePromptTemplate」を読込む
from langchain.prompts import (
    ChatPromptTemplate,
    SystemMessagePromptTemplate,
    HumanMessagePromptTemplate,
)

# ChatPromptTemplateクラスでは、SystemMessageやHumanMessageをテンプレート化したものをまとめて扱うことができる
system_template = "あなたは{genre}の専門家です。質問に対して初心者にも分かりやすく簡潔に答えてください。"
human_template = "{question}"

# ChatPromptTemplateのfrom_messages()メソッドに渡すことで、チャット形式のプロンプトを作る準備は完了
prompt = ChatPromptTemplate.from_messages([
    # SystemMessagePromptTemplateのfrom_template()メソッドの引数に、後ほど置換する変数が埋め込まれたシステムメッセージを渡す
    SystemMessagePromptTemplate.from_template(system_template),
    # HumanMessagePromptTemplateのfrom_template()メソッドの引数には、同じく後ほど置換する変数が埋め込まれたユーザーメッセージを渡す
    HumanMessagePromptTemplate.from_template(human_template),
])

# ChatPromptTemplateクラスのインスタンスである「prompt」のformat_prompt()メソッドの引数に、用意していたテンプレートの穴埋め用の変数に対応するテキストを渡す
messages = prompt.format_prompt(genre="生成AI", question="ChatPromptTemplateの使い方を教えてください。").to_messages()
messages

"""#### 【解答例】"""

from langchain.prompts import (
    ChatPromptTemplate,
    SystemMessagePromptTemplate,
    HumanMessagePromptTemplate,
)

system_template = "あなたは{genre}の専門家です。質問に対して初心者にも分かりやすく簡潔に答えてください。"
human_template = "ユーザー：{question}"

prompt = ChatPromptTemplate.from_messages([
    SystemMessagePromptTemplate.from_template(system_template),
    HumanMessagePromptTemplate.from_template(human_template),
])

messages = prompt.format_prompt(genre="金融", question="株式投資の方法を教えてください。").to_messages()
messages

"""#### 【解説】

ChatPromptTemplateのfrom_messages()メソッドの引数として、roleがsystemのメッセージのテンプレートを作るための「SystemMessagePromptTemplate」、roleがuserのメッセージのテンプレートを作るための「HumanMessagePromptTemplate」を使います。

各roleごとに用意したテンプレートにそれぞれ入力内容を渡すことで、プロンプトが作れます。

### 【問題3】
以下の条件に基づいて、FewShotPromptTemplateを作成してください。  
また生成結果を使ってChat Completions APIのroleがuserのメッセージを作り、LLMで回答を生成しましょう。

【条件】
*   長めの文章を1文で要約するための例を3つ用意する
*   長めの文章と要約のセットはChatGPTで生成する
*   回答例として用意するデータは、入力と出力のそれぞれを変数に格納して使う
*   FewShotPromptTemplateのprefixパラメータには、回答精度を向上させるために適切な文言を設定する
*   入力に使う文章は以下とする

【文章】  
100m走で9秒台を出すためには、総合的なトレーニングと戦略が必要です。まず、筋力トレーニングで特に下半身と体幹を強化し、スタートダッシュやスプリント時の加速力を高めます。また、フォームの改善も重要で、効率的な腕振りやストライドの伸ばし方を専門的に指導してもらうと良いです。さらに、有酸素運動と無酸素運動を組み合わせ、スピードと持久力を両方鍛えることが求められます。適切な栄養管理と休息も、トレーニングの効果を最大化し、怪我を防ぐために不可欠です。最後に、メンタルトレーニングで集中力や競技時のプレッシャーに対応できる能力を向上させることが、9秒台達成の鍵となります。
"""

# promptsモジュールから「FewShotPromptTemplate」クラスを読込む
from langchain.prompts import FewShotPromptTemplate
from langchain.prompts import PromptTemplate

# Few-shotプロンプティングの手法を使ってプロンプトを作るための準備として、複数の回答例を入力と出力のセットで用意(ChatGPTで生成)
long_sentence1 = """AI技術の進化は目覚ましく、特に自然言語処理の分野では、機械翻訳や対話システム、文章生成など多くの領域で人間に近い性能を実現しています。この技術はビジネスや教育、医療など幅広い分野で活用され、今後も急速な発展が期待されています。"""
summary1 = """AIの自然言語処理技術は急速に進化し、さまざまな分野で活用が広がっています。"""

long_sentence2 = """最近の調査によると、日本におけるテレワークの導入率はコロナ禍で急増したものの、2023年以降はやや減少傾向にあります。その理由としては、企業の管理体制やコミュニケーション不足、生産性の課題が挙げられています。一方で、柔軟な働き方を求める従業員のニーズは依然として高く、企業はバランスを取る対応を迫られています。"""
summary2 = """日本ではテレワークがコロナ禍で普及したが、課題により導入率は減少傾向にあります。"""

long_sentence3 = """近年、サステナブルファッションが注目を集めています。これは環境負荷を軽減しつつ、長期間着用可能な衣服を提供する取り組みで、リサイクル素材の活用や生産過程の改善が進んでいます。消費者の間でもエシカルな選択を重視する動きが強まり、ブランドは社会的責任を果たすために新しい戦略を模索しています。"""
summary3 = """サステナブルファッションは環境配慮とエシカル消費の高まりで注目されています。"""

# 入力をin（長い文章）、出力をout（要約）
examples = [
    {"input" : long_sentence1, "output" : summary1},
    {"input" : long_sentence2, "output" : summary2},
    {"input" : long_sentence3, "output" : summary3},
]

# 複数の回答例をプロンプトに埋め込むためのテンプレートを変数「examples_template」で用意
# テンプレートに沿って、用意した複数の回答例をプロンプトに埋め込むことができ
examples_template = """
入力：{input}
出力：{output}
"""

# PromptTemplateを初期化
# FewShotPromptTemplateでは、PromptTemplateを一緒に使う
# 「input_variables」パラメータには、テンプレートの中で置換する変数をリストで渡す
# 「template」パラメータには、先ほど用意したexamples_template（回答例をプロンプトに埋め込む際の出力形式を指定したテンプレート）を渡す
example_prompt = PromptTemplate(
    input_variables=["input", "output"],
    template=examples_template
)

# FewShotPromptTemplateクラスを初期化
# 「examples」パラメータには用意した複数の回答例を渡し、「example_prompt」パラメータにはPromptTemplateのインスタンス（回答例をプロンプトに埋め込む際のテンプレート）を渡す
# その他に、「prefix」パラメータにはプロンプトの先頭に埋め込むテキスト、「suffix」にはプロンプトの末尾に埋め込むテキストを指定。
# そして「input_variables」パラメータには、プロンプトの中でユーザー入力により置換される変数を指定し、「example_separator」パラメータには、用意した回答例と「suffix」で指定した末尾のテキストとの区切り（ここでは改行2つ）を指定。
fewshot_prompt = FewShotPromptTemplate(
    examples=examples,
    example_prompt=example_prompt,
    prefix="長めの文章を1文で要約",
    suffix="入力：{input}\n出力：",
    input_variables=["input"],
    example_separator="\n\n"
)

# PromptTemplateと同じく、format()メソッドの引数にinput_variablesで指定した変数名と入力値を渡す
input_sentence = """100m走で9秒台を出すためには、総合的なトレーニングと戦略が必要です。まず、筋力トレーニングで特に下半身と体幹を強化し、スタートダッシュやスプリント時の加速力を高めます。また、フォームの改善も重要で、効率的な腕振りやストライドの伸ばし方を専門的に指導してもらうと良いです。さらに、有酸素運動と無酸素運動を組み合わせ、スピードと持久力を両方鍛えることが求められます。適切な栄養管理と休息も、トレーニングの効果を最大化し、怪我を防ぐために不可欠です。最後に、メンタルトレーニングで集中力や競技時のプレッシャーに対応できる能力を向上させることが、9秒台達成の鍵となります。"""
message = fewshot_prompt.format(input=input_sentence)

# メッセージ出力
print(message)

from langchain_openai import ChatOpenAI
from langchain.schema import SystemMessage, HumanMessage

llm = ChatOpenAI(model_name="gpt-4o-mini", temperature=0)

messages = [
    SystemMessage(content="You are a helpful assistant."),
    HumanMessage(content=message),
]

result = llm(messages)
print(result.content)

"""#### 【解答例】"""

from langchain.prompts import FewShotPromptTemplate
from langchain.prompts.prompt import PromptTemplate

long_sentence1 = """
LangChainの学習方法としては、まず公式ドキュメントやチュートリアルを通して、基本的なコンセプトやクラス（PromptTemplate、FewShotPromptTemplate、Memoryなど）を理解することが重要です。次に、簡単なプロンプトの作成やモデルの呼び出しを実践し、具体的なタスク（翻訳、質問応答、要約など）に取り組んでみましょう。次のステップとして、外部データベースやAPIとの連携、埋め込み技術（FAISSなど）を用いた検索機能の実装を試みます。プロジェクトベースで実際のユースケースを体験しながら、段階的に複雑なアプリケーションを構築することで、LangChainの活用力が身につきます。
"""
summary1 = "公式資料を学び、実践しながら応用力を高める。"

long_sentence2 = """
3ヶ月以内に健康的に体重を5kg減らすためには、バランスの取れた食事と定期的な運動が重要です。まず、食事ではカロリー制限を意識しつつ、野菜やたんぱく質を中心に栄養バランスを整えます。特に、間食や加工食品、砂糖の摂取を控え、炭水化物も適量に抑えると効果的です。運動では、有酸素運動（ウォーキングやランニング）を週に3〜4回、1回30分以上行うことが推奨されます。また、筋力トレーニングを組み合わせることで基礎代謝を上げ、脂肪燃焼を促進します。睡眠や水分補給にも気を配り、無理なく継続できる習慣を身につけることが成功の鍵です。
"""
summary2 = "バランスの取れた食事と運動で5kg減を目指す。"

long_sentence3 = """
億万長者になるためには、戦略的な計画と継続的な努力が必要です。まず、スキルや知識を磨き、価値のある分野での専門性を高めましょう。次に、収入源を複数確保し、特に投資や起業を通じて資産を増やす手段を考えます。節約と賢い投資を組み合わせ、得た利益を再投資することで資産を拡大します。また、リスク管理も重要で、無理のない範囲でリスクを取りつつ、安定した財務基盤を築きましょう。成功者の事例やネットワークを活用し、最新の経済動向や市場のトレンドを学びながら、目標に向かって着実に進むことが大切です。
"""
summary3 = "計画的な努力と投資で資産を増やすことが重要。"

examples = [
    {"input": long_sentence1, "output": summary1},
    {"input": long_sentence2, "output": summary2},
    {"input": long_sentence3, "output": summary3},
]

examples_template = """
入力：{input}
出力：{output}
"""

example_prompt = PromptTemplate(
    input_variables=["input", "output"],
    template=examples_template
)

fewshot_prompt = FewShotPromptTemplate(
    examples=examples,
    example_prompt=example_prompt,
    prefix="入力した長文を一文で短く要約してください。",
    suffix="入力：{input}\n出力：",
    input_variables=["input"],
    example_separator="\n\n"
)

input_sentence = """
100m走で9秒台を出すためには、総合的なトレーニングと戦略が必要です。まず、筋力トレーニングで特に下半身と体幹を強化し、スタートダッシュやスプリント時の加速力を高めます。また、フォームの改善も重要で、効率的な腕振りやストライドの伸ばし方を専門的に指導してもらうと良いです。さらに、有酸素運動と無酸素運動を組み合わせ、スピードと持久力を両方鍛えることが求められます。適切な栄養管理と休息も、トレーニングの効果を最大化し、怪我を防ぐために不可欠です。最後に、メンタルトレーニングで集中力や競技時のプレッシャーに対応できる能力を向上させることが、9秒台達成の鍵となります。
"""
message = fewshot_prompt.format(input=input_sentence)
print(message)

"""生成結果の確認"""

from langchain_openai import ChatOpenAI
from langchain.schema import SystemMessage, HumanMessage

llm = ChatOpenAI(model_name="gpt-3.5-turbo", temperature=0)

messages = [
    SystemMessage(content="You are a helpful assistant."),
    HumanMessage(content=message),
]

result = llm(messages)
print(result.content)

"""#### 【解説】

変数「examples」で入力を長めの文章、出力を要約とする、入力と出力のセットを3つ用意します。

回答例としてプロンプトに埋め込むPromptTemplateを作った後、FewShotPromptTemplateのexample_prompt引数に渡しています。

これにより入力に対して、複数の回答例を参考として回答を生成するためのプロンプトが作れます。
"""