# -*- coding: utf-8 -*-
"""【教材ソースコード】Lesson9: Prompts.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qZGMFDT20bMk9JukXUXLR262BMRbU3Xl

# 【教材ソースコード】Lesson9: LangChainの主要モジュール1【Model I/O】：Prompts

## 事前準備

OpenAI APIキーの設定
"""

import os
from google.colab import userdata

os.environ["OPENAI_API_KEY"] = userdata.get("OPENAI_API_KEY")

"""各種パッケージのインストール"""

!pip install langchain==0.3.0 openai==1.47.0 langchain-community==0.3.0 langchain-openai==0.2.2 httpx==0.27.2

"""## 教材ソースコード

### Chapter3: Prompt templates

---

#### Prompt Template
"""

from langchain.prompts import PromptTemplate

template = """
以下の専門用語を、初心者向けに分かりやすく説明してください。

専門用語：{word}
説明：
"""

prompt = PromptTemplate(
    input_variables=["word"],
    template=template,
)

message = prompt.format(word="プログラミング言語")
print(message)

"""回答生成"""

from langchain_openai import ChatOpenAI
from langchain.schema import SystemMessage, HumanMessage

llm = ChatOpenAI(model_name="gpt-4o-mini", temperature=0)

messages = [
    SystemMessage(content="You are a helpful assistant."),
    HumanMessage(content=message),
]

result = llm(messages)
print(result.content)

"""#### ChatPromptTemplate"""

from langchain.prompts import (
    ChatPromptTemplate,
    SystemMessagePromptTemplate,
    HumanMessagePromptTemplate,
)

system_template = "あなたは、{genre}に詳しいAIです。ユーザーからの質問に100文字以内で回答してください。"
human_template = "{question}"

prompt = ChatPromptTemplate.from_messages([
    SystemMessagePromptTemplate.from_template(system_template),
    HumanMessagePromptTemplate.from_template(human_template),
])

messages = prompt.format_prompt(genre="フィットネス", question="健康的に体重を減らす方法を教えてください。").to_messages()
messages

"""回答生成"""

from langchain_openai import ChatOpenAI

llm = ChatOpenAI(model_name="gpt-4o-mini", temperature=0)

result = llm(messages)
result.content

"""#### FewShotPromptTemplate"""

from langchain.prompts import FewShotPromptTemplate
from langchain.prompts.prompt import PromptTemplate

examples = [
    {"prefectures": "秋田県", "region": "東北地方"},
    {"prefectures": "東京都", "region": "関東地方"},
    {"prefectures": "佐賀県", "region": "九州地方"},
]

examples_template = """
都道府県：{prefectures}
地域：{region}
"""

example_prompt = PromptTemplate(
    input_variables=["prefectures", "region"],
    template=examples_template
)

fewshot_prompt = FewShotPromptTemplate(
    examples=examples,
    example_prompt=example_prompt,
    prefix="都道府県が属する地域を回答してください。",
    suffix="都道府県：{prefectures}\n地域：",
    input_variables=["prefectures"],
    example_separator="\n\n"
)

message = fewshot_prompt.format(prefectures="岡山県")
print(message)

"""回答生成"""

from langchain_openai import ChatOpenAI
from langchain.schema import SystemMessage, HumanMessage

llm = ChatOpenAI(model_name="gpt-4o-mini", temperature=0)

messages = [
    SystemMessage(content="You are a helpful assistant."),
    HumanMessage(content=message),
]

result = llm(messages)
print(result.content)

"""複数の回答例をプロンプトに埋め込まない場合"""

from langchain_openai import ChatOpenAI
from langchain.schema import SystemMessage, HumanMessage

llm = ChatOpenAI(model_name="gpt-4o-mini", temperature=0)

messages = [
    SystemMessage(content="You are a helpful assistant."),
    HumanMessage(content="岡山県が属する地域を回答してください。"),
]

result = llm(messages)
print(result.content)

"""### Chapter4: Example selectors

---

#### LengthBasedExampleSelector
"""

from langchain.prompts import FewShotPromptTemplate
from langchain.prompts.example_selector import LengthBasedExampleSelector
from langchain.prompts.prompt import PromptTemplate

examples = [
    {"prefectures": "北海道", "region": "北海道地方"},
    {"prefectures": "秋田県", "region": "東北地方"},
    {"prefectures": "東京都", "region": "関東地方"},
    {"prefectures": "愛知県", "region": "中部地方"},
    {"prefectures": "和歌山県", "region": "近畿地方"},
    {"prefectures": "広島県", "region": "中国地方"},
    {"prefectures": "徳島県", "region": "四国地方"},
    {"prefectures": "佐賀県", "region": "九州地方"},
]

examples_template = """
都道府県：{prefectures}
地域：{region}
"""

example_prompt = PromptTemplate(
    input_variables=["prefectures", "region"],
    template=examples_template
)

example_selector = LengthBasedExampleSelector(
    examples=examples,
    example_prompt=example_prompt,
    max_length=15,
)

fewshot_prompt = FewShotPromptTemplate(
    example_selector=example_selector,
    example_prompt=example_prompt,
    prefix="都道府県が属する地域を回答してください。",
    suffix="都道府県：{prefectures}\n地域：",
    input_variables=["prefectures"],
    example_separator="\n\n"
)

message = fewshot_prompt.format(prefectures="岡山県")
print(message)

"""#### SemanticSimilarityExampleSelector

パッケージのインストール
"""

!pip install tiktoken faiss-cpu

from langchain.prompts import FewShotPromptTemplate
from langchain.prompts.example_selector import SemanticSimilarityExampleSelector
from langchain.prompts.prompt import PromptTemplate
from langchain.vectorstores import FAISS
from langchain_openai import OpenAIEmbeddings

examples = [
    {"input": "猫", "output": "哺乳類"},
    {"input": "ITエンジニアついて教えてください。", "output": "ITエンジニアは、システム開発や保守を行う技術者です。"},
    {"input": "犬", "output": "哺乳類"},
    {"input": "パリでおすすめの観光地は？", "output": "エッフェル塔、ルーブル美術館、ノートルダム大聖堂は、パリでの人気観光地です。"},
    {"input": "亀", "output": "爬虫類"},
]

examples_template = """
入力：{input}
出力：{output}
"""

example_prompt = PromptTemplate(
    input_variables=["input", "output"],
    template=examples_template
)

example_selector = SemanticSimilarityExampleSelector.from_examples(
    examples=examples,
    embeddings=OpenAIEmbeddings(),
    vectorstore_cls=FAISS,
    k=2
)

fewshot_prompt = FewShotPromptTemplate(
    example_selector=example_selector,
    example_prompt=example_prompt,
    prefix="脊椎動物の種類を教えてください。",
    suffix="入力：{input}\n出力：",
    input_variables=["input"],
    example_separator="\n\n"
)

message = fewshot_prompt.format(input="イルカ")
print(message)