# -*- coding: utf-8 -*-
"""【教材ソースコード】Lesson11: Chains

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QqnfYfU1syBcGQa5xi8s89NJDK0lL5cW

# 【教材ソースコード】Lesson11: LangChainの主要モジュール2【Chains】

## 事前準備

OpenAI APIキーの設定
"""

import os
from google.colab import userdata

os.environ["OPENAI_API_KEY"] = userdata.get("OPENAI_API_KEY")

"""各種パッケージのインストール"""

!pip install langchain==0.3.0 openai==1.47.0 langchain-community==0.3.0 langchain-openai==0.2.2 httpx==0.27.2

"""## 教材ソースコード

### Chapter3: 基本的な3つのChains

---

#### LLMChain
"""

from langchain_openai import ChatOpenAI
from langchain.prompts import PromptTemplate
from langchain import LLMChain

template = """
以下の地名の、おすすめの観光スポットを3つ教えてください。

地名：{place}
"""

prompt = PromptTemplate(
    input_variables=["place"],
    template=template,
)

llm = ChatOpenAI(model_name="gpt-4o-mini", temperature=0.5)

chain = LLMChain(prompt=prompt, llm=llm)
result = chain.run(place="東京都")

print(result)

"""LLMChainを使わない場合"""

from langchain.prompts import PromptTemplate
from langchain_openai import ChatOpenAI
from langchain.schema import SystemMessage, HumanMessage

template = """
以下の地名の、おすすめの観光スポットを3つ教えてください。

地名：{place}
"""

prompt = PromptTemplate(
    input_variables=["place"],
    template=template,
)

result = prompt.format(place="東京都")

llm = ChatOpenAI(model_name="gpt-4o-mini", temperature=0)

messages = [
    SystemMessage(content="You are a helpful assistant."),
    HumanMessage(content=result),
]

result = llm(messages)
print(result.content)

"""Output Parserも追加する"""

from langchain_openai import ChatOpenAI
from langchain.prompts import PromptTemplate
from langchain import LLMChain
from langchain.output_parsers import CommaSeparatedListOutputParser

template = """
以下の地名の、おすすめの観光スポットを3つ教えてください。

{format_instruction}

地名：{place}
"""

output_parser = CommaSeparatedListOutputParser()

prompt = PromptTemplate(
    input_variables=["place"],
    template=template,
    partial_variables={"format_instruction": output_parser.get_format_instructions()}
)

llm = ChatOpenAI(model_name="gpt-4o-mini", temperature=0.5)

chain = LLMChain(prompt=prompt, llm=llm, output_parser=output_parser)
result = chain.run(place="東京都")

print(result)

"""LLMChainに「verbose=True」を指定する"""

chain = LLMChain(prompt=prompt, llm=llm, output_parser=output_parser, verbose=True)
result = chain.run(place="東京都")

print(result)

"""#### SimpleSequentialChain

1つ目のChainの作成
"""

from langchain_openai import ChatOpenAI
from langchain.prompts import PromptTemplate
from langchain import LLMChain
from langchain.chains import SimpleSequentialChain

llm = ChatOpenAI(model_name="gpt-4o-mini", temperature=0.5)

first_template = """
あなたは小説家です。以下のテーマで、小説の導入を300文字以内で書いてください。

テーマ：{theme}
小説の導入：
"""

first_prompt = PromptTemplate(
    input_variables=["theme"],
    template=first_template
)

first_chain = LLMChain(llm=llm, prompt=first_prompt)

"""2つ目のChainの作成"""

second_template = """
あなたは小説の評論家です。以下の小説の導入を100文字以内でレビューしてください。

小説の導入：{introduction}
レビュー：
"""

second_prompt = PromptTemplate(
    input_variables=["introduction"],
    template=second_template
)

second_chain = LLMChain(llm=llm, prompt=second_prompt)

"""2つのChainを繋ぎ合わせたChainの作成"""

chain = SimpleSequentialChain(chains=[first_chain, second_chain])

"""小説のテーマを与えてChainを実行"""

result = chain("アンドロイドと人間が共に生活する世界において、感情を持たないはずのアンドロイドと禁断の恋に落ちる物語")
print(result["output"])

"""#### SequentialChain

1つ目のChain
"""

from langchain_openai import ChatOpenAI
from langchain.prompts import PromptTemplate
from langchain import LLMChain
from langchain.chains import SequentialChain

llm = ChatOpenAI(model_name="gpt-4o-mini", temperature=0.5)

first_template = """
あなたは小説家です。以下のテーマで、小説の導入を300文字以内で書いてください。

テーマ：{theme}
トーン：{tone}
小説の導入：
"""

first_prompt = PromptTemplate(
    input_variables=["theme", "tone"],
    template=first_template
)

first_chain = LLMChain(
    llm=llm,
    prompt=first_prompt,
    output_key="introduction"
)

"""2つ目のChain"""

second_template = """
あなたは小説の評論家です。以下の小説の導入を100文字以内でレビューしてください。

小説の導入：{introduction}
"""

second_prompt = PromptTemplate(
    input_variables=["introduction"],
    template=second_template
)

second_chain = LLMChain(
    llm=llm,
    prompt=second_prompt,
    output_key="review"
)

"""2つ目のChainを繋げたSequentialChainの作成"""

chain = SequentialChain(
    chains=[first_chain, second_chain],
    input_variables=["theme", "tone"],
    output_variables=["introduction", "review"],
)

"""SequentialChainを実行"""

result = chain({"theme":"アンドロイドと人間の禁断の恋", "tone": "コメディ"})
print(result)

"""LLMが生成した小説に対してのレビュー内容を取得"""

print(result["review"])

"""### Chapter4: その他のChains

---

#### OpenAIModerationChain

OpenAIModerationChainクラスのインスタンスを作成
"""

from langchain.chains import OpenAIModerationChain

chain = OpenAIModerationChain()

"""OpenAIのポリシーに引っかからない入力"""

chain.run("今日の空は青い")

"""OpenAIのポリシーに引っかかる入力"""

chain.run("虐殺、抹殺、虐待")

"""OpenAIの利用ポリシーに反している入力が与えられた場合に例外を発生させる"""

chain = OpenAIModerationChain(error=True)

try:
    chain.run("虐殺、抹殺、虐待")
except ValueError as e:
    print("OpenAIの利用ポリシーに反する、不適切な入力が与えられました。")
    print(f"例外詳細: {e}")

"""#### LLMRouterChain

1. 入力内容に応じてLLMにどれを使うか判断させるための、複数のプロンプトテンプレートを用意する
"""

stress_template = """
あなたは親の育児ストレスを軽減するための専門家です。
育児疲れやストレス管理に関する実践的なアドバイスを提供します。
親自身の心身の健康を保つための方法を教えます。

質問：{input}
"""

nutrition_template = """
あなたは子どもの栄養に詳しいアドバイザーです。
子どもの健康な発育を支える食事や栄養バランスについてアドバイスを提供します。
食事の習慣や偏食に関する質問にも丁寧に答えます。

質問：{input}
"""

sleep_template = """
あなたは子どもの睡眠習慣に詳しい専門家です。
子どもの夜泣きや睡眠不足に関する解決策を提供し、健全な睡眠を促すためのアドバイスを行います。
親が子どもの睡眠問題に対処できるようサポートします。

質問：{input}
"""

balance_template = """
あなたは働く親のための育児と仕事の両立に詳しいアドバイザーです。
仕事と育児のバランスを保つための実践的なアドバイスを提供し、時間管理や家族とのコミュニケーションをサポートします。

質問：{input}
"""

prompt_infos = [
    {
        "name": "stress",
        "description": "親の育児ストレスを軽減するための専門家です",
        "prompt_template": stress_template
    },
    {
        "name": "nutrition",
        "description": "子供の栄養に詳しい専門家です",
        "prompt_template": nutrition_template
    },
    {
        "name": "sleep",
        "description": "子どもの睡眠習慣に詳しい専門家です",
        "prompt_template": sleep_template
    },
    {
        "name": "balance",
        "description": "働く親のための育児と仕事の両立に詳しい専門家です",
        "prompt_template": balance_template
    },
]

"""2. 呼び出すモデルのインスタンスを作る"""

from langchain_openai import ChatOpenAI
from langchain.prompts import PromptTemplate
from langchain import LLMChain

llm = ChatOpenAI(model_name="gpt-4o-mini", temperature=0.5)

"""3. 候補となるChainの一覧を、名前付きで辞書に登録する"""

destination_chains = {}
for prompt_info in prompt_infos:
    name = prompt_info["name"]
    prompt_template = prompt_info["prompt_template"]
    prompt = PromptTemplate(template=prompt_template)
    chain = LLMChain(llm=llm, prompt=prompt)
    destination_chains[name] = chain

destination_chains

"""4. 最初の入力を受け取るChainを用意する"""

default_prompt = PromptTemplate(input_variables=["input"], template="{input}")
default_chain = LLMChain(llm=llm, prompt=default_prompt)

"""5. LLMRouterChainのテンプレートと、各Chainの名前と説明をセットにしたテキストを

 結合してPromptTemplateを作り、それを活用してLLMRouterChainを作る

「各Chainの名前と説明をセットにしたテキスト」の作成
"""

destinations = []
for p in prompt_infos:
    destinations.append(f"{p['name']}: {p['description']}")

destinations

"""「あらかじめ用意されているテンプレート」と結合するため、リストを文字列に変換"""

destinations_str = "\n".join(destinations)

print(destinations_str)

"""「あらかじめ用意されているテンプレート」の中身を確認"""

from langchain.chains.router.multi_prompt_prompt import MULTI_PROMPT_ROUTER_TEMPLATE

print(MULTI_PROMPT_ROUTER_TEMPLATE)

"""「あらかじめ用意されているテンプレート」と「各Chainの名前と説明をセットにしたテキスト」を  
結合したプロンプトテンプレートを作成
"""

router_template = MULTI_PROMPT_ROUTER_TEMPLATE.format(
    destinations=destinations_str
)

"""LLMRouterChainを作るためのPromptTemplateを作成"""

from langchain.chains.router.llm_router import RouterOutputParser

router_prompt = PromptTemplate(
    template=router_template,
    input_variables=["input"],
    output_parser=RouterOutputParser(),
)

"""LLMRouterChainの作成"""

from langchain.chains.router.llm_router import LLMRouterChain

router_chain = LLMRouterChain.from_llm(llm, router_prompt)

"""6. 最初の入力を受け取るのに使うChainと、入力内容に応じてどのChainを実行するかを

 判断してもらうためのLLMRouterChainと、候補となるChainの一覧を元にMultiPromptChainを作る
"""

from langchain.chains.router import MultiPromptChain

chain = MultiPromptChain(
	 router_chain=router_chain,
	 destination_chains=destination_chains,
	 default_chain=default_chain,
	 verbose=True
)

"""7. MultiPromptChainに入力を渡し、LLMに使うChainを判断させて実行し、回答を得る"""

print(chain.run("栄養バランスの良い食事についてアドバイスをください。"))

print(chain.run("子供が毎日夜中に起きてしまいます。子供が心地よく睡眠できる方法を教えてください。"))