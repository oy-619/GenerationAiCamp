# -*- coding: utf-8 -*-
"""Chapter6:【提出課題: 解答用】型変換のOutput Parserで例外が発生した際に修正依頼を出そう

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lXVxiY1Ju6dvFYKx_ymc_forNkBjK9rl

# Lesson10: LangChainの主要モジュール1【Model I/O】：Output Parser
# Chapter6:【提出課題: 解答用】型変換のOutput Parserで例外が発生した際に修正依頼を出そう

事前準備を行った上で、提出課題に取り組みましょう。

**【提出方法】**  
Slackでメンターをメンションの上、当シート右上の「共有」からリンクをコピーし、提出してください。

## 事前準備

OpenAI APIキーの設定
"""

import os
from google.colab import userdata

os.environ["OPENAI_API_KEY"] = userdata.get("OPENAI_API_KEY")

"""各種パッケージのインストール"""

!pip install langchain==0.3.0 openai==1.47.0 langchain-community==0.3.0 langchain-openai==0.2.2 httpx==0.27.2 pydantic==2.9.2

"""## 提出課題

### 【問題文】

当Lessonの「Chapter3: 型変換のOutput Parser」で解説した「Structured output parser」の以下コードについて、  
仮に欲しい出力形式でLLMから回答を得られず、型変換の処理で例外が発生した場合、  
Retry parserを使って修正依頼を出すようコードを記述してください。

**【※注記】**  
動作確認のため、1回目の型変換の処理(「output_parser.parse()」メソッド)で例外が発生するよう、  
LLMからの回答「output.content」の値を「Python」に上書きしてください。

### 【あらかじめ用意されているコード】
"""

# 以下のコードは変更しないでください。

from langchain.output_parsers import StructuredOutputParser, ResponseSchema
from langchain.prompts import PromptTemplate
from langchain_openai import ChatOpenAI
from langchain.schema import SystemMessage, HumanMessage

schemas = [
    ResponseSchema(name="programming_language", description="プログラミング言語"),
    ResponseSchema(name="overview", description="プログラミング言語の説明")
]

output_parser = StructuredOutputParser.from_response_schemas(schemas)

format_instruction = output_parser.get_format_instructions()

prompt_template = PromptTemplate(
    template="AI開発におすすめのプログラミング言語を教えてください。\n{format_instruction}",
    input_variables=[],
    partial_variables={"format_instruction": format_instruction}
)
prompt = prompt_template.format_prompt()

llm = ChatOpenAI(model_name="gpt-4o-mini", temperature=0.5)

messages = [
    SystemMessage(content="You are a helpful assistant."),
    HumanMessage(content=prompt.text)
]

output = llm(messages)

"""### 【解答】"""

# Retry Parserでは、「RetryWithErrorOutputParser」クラスを使う
from langchain.output_parsers import RetryWithErrorOutputParser

# クラスを読み込んだ後、型変換のOutput Parserによる例外をキャッチするために「try - except文」を使っている
try:
    output.content = "Python"
    result = output_parser.parse(output.content)
    print(result)

# try文の中で型変換の処理を行い、ValueErrorの例外が発生したらexcept文が実行される
except ValueError as e:

    # ValueErrorのエラーオブジェクトを含めて例外メッセージを表示
    print(f"型変換のOutput Parserで型変換を行った際にValue Errorの例外が発生しました。")
    print(f"例外の詳細: {e}")

    # 次にRetryWithErrorOutputParserクラスの「from_llm()」メソッドを呼び出し、引数に以下の2つを指定しています。
    # 型変換のOutput Parserクラスのインスタンス内には、発生した例外エラーに関する情報が入っている。そして指定したLLMのモデルに修正依頼を出す
    retry_parser = RetryWithErrorOutputParser.from_llm(

        # 1.型変換のOutput Parserクラスのインスタンス
        parser=output_parser,

        # 2.呼び出すLLMのモデル
        llm = ChatOpenAI(model_name="gpt-4o-mini", temperature=0.5)
    )

    # Retry parserで修正依頼を出す際にLLMに渡す情報は以下の3つです。
    # 1.例外エラーの内容
    # 2.LLMからの（出力形式が適切でない）回答
    # 3.プロンプト全体（フォーマット命令を含む）
    # 「retry_parser」の中に「例外エラーの内容」が入っているため、これで修正依頼に必要な3つの情報を全て用意できました。
    result = retry_parser.parse_with_prompt(output.content, prompt)

    # Retry parserで修正依頼を出した後のLLMからの回答を表示
    print(result)