# -*- coding: utf-8 -*-
"""【教材ソースコード】Lesson 6: OpenAI API

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1f3V6qlojJ6chdDiirAQiHVihh3A975yq

# 【教材ソースコード】Lesson 6: OpenAI API

## Chapter4: Chat Completions APIを使う準備

---

「openai」パッケージのインストール
"""

!pip install openai==1.47.0

"""関連パッケージのインストール"""

!pip install httpx==0.27.2

"""APIキーをシークレット機能で設定"""

import os
from google.colab import userdata

os.environ["OPENAI_API_KEY"] = userdata.get("OPENAI_API_KEY")

"""## Chapter5: Chat Completions APIの基本

---

### 質問応答
"""

from openai import OpenAI

client = OpenAI(api_key=os.environ["OPENAI_API_KEY"])

completion = client.chat.completions.create(
   model="gpt-4o-mini",
   messages=[
       {"role": "system", "content": "あなたは健康に関するアドバイザーです。安全なアドバイスを提供してください。"},
       {"role": "user", "content": "最近眠れないのですが、どうしたらいいですか？"},
       {"role": "assistant", "content": "寝る前にリラックスできる音楽を聴く、またはスクリーンタイムを減らすとよいでしょう。"},
       {"role": "user", "content": "カフェインも避けたほうがいいですか？"}
   ],
   temperature=0.5
)

print(completion.choices[0].message.content)

"""会話履歴を踏まえた回答をしてくれないことの確認"""

from openai import OpenAI

client = OpenAI(api_key=os.environ["OPENAI_API_KEY"])

# 1回目の質問
first_completion = client.chat.completions.create(
   model="gpt-4o-mini",
   messages=[
       {"role": "system", "content": "あなたは健康に関するアドバイザーです。安全なアドバイスを提供してください。"},
       {"role": "user", "content": "最近眠れないのですが、どうしたらいいですか？"}
   ],
   temperature=0.5
)

print(first_completion.choices[0].message.content)

# 2回目の質問
second_completion = client.chat.completions.create(
   model="gpt-4o-mini",
   messages=[
       {"role": "system", "content": "あなたは健康に関するアドバイザーです。安全なアドバイスを提供してください。"},
       {"role": "user", "content": "もう一度質問に答えてください。"}
   ],
   temperature=0.5
)

print(second_completion.choices[0].message.content)

"""#### リクエスト時に指定できる様々なパラメータ

##### max_tokens
"""

from openai import OpenAI

client = OpenAI(api_key=os.environ["OPENAI_API_KEY"])

completion = client.chat.completions.create(
   model="gpt-4o-mini",
   messages=[
       {"role": "system", "content": "あなたは料理のアドバイザーです。"},
       {"role": "user", "content": "ヘルシーで簡単なレシピを教えてください。"},
   ],
   temperature=0.5,
   max_tokens=100
)

print(completion.choices[0].message.content)

"""##### n"""

from openai import OpenAI

client = OpenAI(api_key=os.environ["OPENAI_API_KEY"])

completion = client.chat.completions.create(
   model="gpt-4o-mini",
   messages=[
       {"role": "system", "content": "あなたは親切で知識豊富な旅行ガイドです。"},
       {"role": "user", "content": "おすすめの日本旅行プランを100文字以内で教えてください。"},
   ],
   temperature=0.5,
   n=3
)

for choice in completion.choices:
    print(choice.message.content)
    print("===============")

"""### 編集"""

from openai import OpenAI

client = OpenAI(api_key=os.environ["OPENAI_API_KEY"])

completion = client.chat.completions.create(
   model="gpt-4o-mini",
   messages=[
       {"role": "system", "content": "あなたは編集者です。与えられたテキストの誤字脱字を直してください。"},
       {"role": "user", "content": "きょうははれで、きぶんもすっきりんした。"},
   ],
   temperature=0
)

print(completion.choices[0].message.content)

"""### 要約"""

from openai import OpenAI

client = OpenAI(api_key=os.environ["OPENAI_API_KEY"])

input_text = """
現代のビジネスにおいて、テクノロジーの進化は企業の競争力を大きく左右する要素となっています。
特に人工知能（AI）や機械学習（ML）などの技術が注目され、それらを活用する企業が増えています。
AI技術の導入により、業務の自動化が進み、作業効率の向上やコスト削減が期待されます。
また、顧客データの分析によって、個別ニーズに対応したサービスの提供が可能となり、
顧客満足度の向上にも繋がります。しかし、AI導入には多額のコストがかかる上、
データの精度やセキュリティの問題も課題です。特に個人情報の取り扱いには慎重さが求められ、
企業は適切なデータ管理とセキュリティ対策を行わなければなりません。
さらに、AIによる業務の自動化が進む一方で、人材の育成や新しいスキルの習得も重要視され、
技術だけでなく、人材の適応力や学習能力も企業の成長に不可欠な要素といえます。
このように、テクノロジーの導入は企業に多くの利点をもたらす一方で、解決すべき課題も少なくありません。
"""

completion = client.chat.completions.create(
   model="gpt-4o-mini",
   messages=[
       {"role": "system", "content": "あなたは文章要約の専門家です。元の意味を保ちながら、文章の要点を100文字程度で簡潔にまとめてください。"},
       {"role": "user", "content": input_text},
   ],
   temperature=0
)

print(completion.choices[0].message.content)

"""### 翻訳"""

from openai import OpenAI

client = OpenAI(api_key=os.environ["OPENAI_API_KEY"])

completion = client.chat.completions.create(
   model="gpt-4o-mini",
   messages=[
       {"role": "system", "content": "あなたは翻訳の専門家です。与えられたテキストを日本語から英語に正確に翻訳してください。"},
       {"role": "user", "content": "新しい技術を活用して、効率的に業務を改善する方法"},
   ],
   temperature=0
)

print(completion.choices[0].message.content)

"""### 文章の続きを生成"""

from openai import OpenAI

client = OpenAI(api_key=os.environ["OPENAI_API_KEY"])

completion = client.chat.completions.create(
   model="gpt-4o-mini",
   messages=[
       {"role": "system", "content": "あなたは物語の続きを描くプロの作家です。与えられた冒頭に合わせて、一貫した語り口で続きを創作してください。"},
       {"role": "user", "content": "彼は静かな湖のほとりに立ち、遠くの山々を見つめていた。水面は穏やかで、彼の心もそれに合わせるように次第に落ち着いていったが、ふと何かに気づいたように視線を移し、"}
   ],
   temperature=0
)

print(completion.choices[0].message.content)

"""### 文章の間を生成"""

from openai import OpenAI

client = OpenAI(api_key=os.environ["OPENAI_API_KEY"])

before_text = "彼は静かな湖のほとりに立ち、遠くの山々を見つめていた。"
after_text =  "湖を離れると、彼は新しい目的地へ向かって歩き出した。"

completion = client.chat.completions.create(
   model="gpt-4o-mini",
   messages=[
       {"role": "system", "content": "あなたは物語をつなぐ文章を創作するプロの作家です。以下の文章Aと文章Bの間に自然に繋がる中間の文章を生成してください。"},
       {"role": "user", "content": f"文章A: {before_text}　文章B: {after_text}"}
   ],
   temperature=0
)

print(completion.choices[0].message.content)

"""### コード生成

要件をもとにコードを生成させる
"""

from openai import OpenAI

client = OpenAI(api_key=os.environ["OPENAI_API_KEY"])

input_text = """
以下の要件を満たすPythonコードを作成してください:
1. ユーザーから整数を入力として受け取る。
2. その整数が偶数かどうかを判定する。
3. 判定結果を表示する。
"""

completion = client.chat.completions.create(
   model="gpt-4o-mini",
   messages=[
       {"role": "system", "content": "あなたは熟練したPythonプログラマーです。ユーザーからの要件に基づいて、効率的で正確なPythonコードを作成してください。ただし、コード部分のみを出力するものとします。"},
       {"role": "user", "content": input_text}
   ],
   temperature=0
)

print(completion.choices[0].message.content)

"""コードのリファクタリング（修正）"""

from openai import OpenAI

client = OpenAI(api_key=os.environ["OPENAI_API_KEY"])

input_text = """
def calculate_sum(n):
    total = 0
    for i in range(1, n+1):
        total += i
    return total
"""

completion = client.chat.completions.create(
   model="gpt-4o-mini",
   messages=[
       {"role": "system", "content": "あなたは熟練したPythonプログラマーです。コードの動作を変えずに、可読性と実行効率を向上させるリファクタリングを行ってください。ただし、コード部分のみを出力するものとします。"},
       {"role": "user", "content": input_text}
   ],
   temperature=0
)

print(completion.choices[0].message.content)

"""エラー解消"""

from openai import OpenAI

client = OpenAI(api_key=os.environ["OPENAI_API_KEY"])

input_text = """
def get_element(lst, index):
    return lst[index]

numbers = [1, 2, 3]
print("Element:", get_element(numbers, 5))
"""

completion = client.chat.completions.create(
   model="gpt-4o-mini",
   messages=[
       {"role": "system", "content": "あなたは熟練したPythonプログラマーです。与えられたコードでは、リストのインデックスが範囲外になると「IndexError」が発生します。リストの長さを考慮してエラーが発生しないように修正してください。ただし、コード部分のみを出力するものとします。"},
       {"role": "user", "content": input_text}
   ],
   temperature=0
)

print(completion.choices[0].message.content)

"""## Chapter6: Chat Completions APIの応用

---

### 会話履歴を踏まえて回答させる

1回目のLLMリクエスト（会話履歴を踏まえて回答しないことの確認）
"""

from openai import OpenAI

client = OpenAI(api_key=os.environ["OPENAI_API_KEY"])

completion = client.chat.completions.create(
   model="gpt-4o-mini",
   messages=[
       {"role": "system", "content": "あなたは掃除に関するアドバイザーです。"},
       {"role": "user", "content": "部屋の掃除について、どこから手をつけたらいいか200文字以内で回答してください。"},
   ],
   temperature=0.5
)

print(completion.choices[0].message.content)

"""2回目のLLMリクエスト（会話履歴を踏まえて回答しないことの確認）"""

from openai import OpenAI

client = OpenAI(api_key=os.environ["OPENAI_API_KEY"])

completion = client.chat.completions.create(
   model="gpt-4o-mini",
   messages=[
       {"role": "system", "content": "あなたは掃除に関するアドバイザーです。"},
       {"role": "user", "content": "もう一度質問に答えてください。"},
   ],
   temperature=0.5
)

print(completion.choices[0].message.content)

"""1回目のLLMリクエスト（会話履歴を踏まえて回答することの確認）"""

from openai import OpenAI

client = OpenAI(api_key=os.environ["OPENAI_API_KEY"])

first_input_data = input("掃除に関することをAIチャットで聞いてみましょう。")
completion = client.chat.completions.create(
   model="gpt-4o-mini",
   messages=[
       {"role": "system", "content": "あなたは掃除に関するアドバイザーです。"},
       {"role": "user", "content": first_input_data}
   ],
   temperature=0.5
)

print(completion.choices[0].message.content)

"""2回目のLLMリクエスト（会話履歴を踏まえて回答することの確認）"""

result = completion.choices[0].message.content
second_input_data = input("掃除に関することをAIチャットで聞いてみましょう。")
completion = client.chat.completions.create(
   model="gpt-4o-mini",
   messages=[
       {"role": "system", "content": "あなたは掃除に関するアドバイザーです。"},
       {"role": "user", "content": first_input_data},
       {"role": "assistant", "content": result},
       {"role": "user", "content": second_input_data}
   ],
   temperature=0.5
)

print(completion.choices[0].message.content)

"""会話履歴を踏まえて回答させる実用的なコード"""

from openai import OpenAI

client = OpenAI(api_key=os.environ["OPENAI_API_KEY"])

conversation_history = [
    {"role": "system", "content": "あなたは掃除に関するアドバイザーです。質問に対して200文字以内で回答してください。"}
]
while True:
    input_data = input("掃除に関する質問（quitで終了）: ")
    if input_data == "quit":
        break

    conversation_history.append({"role": "user", "content": input_data})

    completion = client.chat.completions.create(
        model="gpt-4o-mini",
        messages=conversation_history,
        temperature=0.5
    )

    result = completion.choices[0].message.content
    conversation_history.append({"role": "assistant", "content": result})

    print(result)
    print("=======================")

"""### プログラム実行前にトークン数を確認する方法"""



"""パッケージのインストール"""

!pip install tiktoken==0.8.0

"""エンコーディングの作成"""

import tiktoken

enc = tiktoken.get_encoding("cl100k_base")

"""テキストのトークン化"""

tokens = enc.encode("私の名前は田中です。")

print(tokens)

"""トークン数の確認"""

print(len(tokens))

"""### トークン数を節約する方法"""

from openai import OpenAI

client = OpenAI(api_key=os.environ["OPENAI_API_KEY"])
enc = tiktoken.get_encoding("cl100k_base")

MAX_ALLOWED_TOKENS = 300
total_tokens = 0

conversation_history = [
    {"role": "system", "content": "あなたは掃除に関するアドバイザーです。質問に対して200文字以内で回答してください。"}
]
while True:
    input_data = input("掃除に関する質問（quitで終了）: ")
    if input_data == "quit":
        break

    input_tokens = len(enc.encode(input_data))
    if input_tokens > MAX_ALLOWED_TOKENS:
        print(f"入力する文字列は{MAX_ALLOWED_TOKENS}以下にしてください。")
        continue
    total_tokens += input_tokens
    conversation_history.append({"role": "user", "content": input_data})

    completion = client.chat.completions.create(
        model="gpt-4o-mini",
        messages=conversation_history,
        temperature=0.5
    )

    result = completion.choices[0].message.content
    conversation_history.append({"role": "assistant", "content": result})

    response_tokens = len(enc.encode(result))
    total_tokens += response_tokens
    print(f"現在の会話履歴のトークン数: {total_tokens}")

    remove_flg = False
    while total_tokens > MAX_ALLOWED_TOKENS:
        removed_message = conversation_history.pop(1)
        removed_tokens = len(enc.encode(removed_message['content']))
        total_tokens -= removed_tokens
        remove_flg = True
    if remove_flg:
        print(f"削除処理後の会話履歴のトークン数: {total_tokens}")

    print(result)
    print("=======================")

"""### ストリーミングで回答を得る方法"""

from openai import OpenAI

client = OpenAI(api_key=os.environ["OPENAI_API_KEY"])

completion = client.chat.completions.create(
   model="gpt-4o-mini",
   messages=[
       {"role": "system", "content": "あなたは料理のアドバイザーです。"},
       {"role": "user", "content": "ヘルシーで簡単なレシピを教えてください。"},
   ],
   temperature=0.5,
   stream=True
)

for chunk in completion:
    choice = chunk.choices[0]
    if choice.finish_reason is None:
        print(choice.delta.content, end="")

"""## Chapter7: テキスト以外のコンテンツ生成

---

### 画像生成

#### テキストから画像生成
"""

from openai import OpenAI

client = OpenAI(api_key=os.environ["OPENAI_API_KEY"])

response = client.images.generate(
   model="dall-e-3",
   prompt="恐竜と人間が住む世界",
   size="1024x1024",
   quality="hd",
   style="vivid"
)

image_url = response.data[0].url
print(image_url)

"""qualityとstyleのパラメータを変更"""

from openai import OpenAI

client = OpenAI(api_key=os.environ["OPENAI_API_KEY"])

response = client.images.generate(
   model="dall-e-3",
   prompt="恐竜と人間が住む世界",
   size="1024x1024",
   quality="standard",
   style="natural"
)

image_url = response.data[0].url
print(image_url)

"""モデルをDALL-E 2に変更"""

from openai import OpenAI

client = OpenAI(api_key=os.environ["OPENAI_API_KEY"])

response = client.images.generate(
   model="dall-e-2",
   prompt="恐竜と人間が住む世界",
   size="1024x1024",
   n=3
)

for data in response.data:
    image_url = data.url
    print(image_url)

"""#### 画像を入力とし、似た画像を生成"""

from openai import OpenAI

client = OpenAI(api_key=os.environ["OPENAI_API_KEY"])

response = client.images.create_variation(
  model="dall-e-2",
  image=open("original.png", "rb"),
  size="1024x1024",
  n=1,
)

image_url = response.data[0].url
print(image_url)

"""### 音声生成"""

from openai import OpenAI

client = OpenAI(api_key=os.environ["OPENAI_API_KEY"])

prompt = "光の速さは約30万キロメートル毎秒です。この速度で地球を一周すると、わずか0.13秒しかかかりません。"

response = client.audio.speech.create(
    model="tts-1",
    voice="shimmer",
    input=prompt
)

response.stream_to_file("voice.mp3")